package com.tosmart.dlna.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tosmart.dlna.data.local.DlnaItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DLNA_ITEM_ENTITY".
*/
public class DlnaItemEntityDao extends AbstractDao<DlnaItemEntity, Long> {

    public static final String TABLENAME = "DLNA_ITEM_ENTITY";

    /**
     * Properties of entity DlnaItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property MimeType = new Property(2, String.class, "mimeType", false, "MIME_TYPE");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property IsContainer = new Property(6, boolean.class, "isContainer", false, "IS_CONTAINER");
        public final static Property IsSelected = new Property(7, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property ChildCount = new Property(8, int.class, "childCount", false, "CHILD_COUNT");
        public final static Property ContainerId = new Property(9, String.class, "containerId", false, "CONTAINER_ID");
        public final static Property MetaData = new Property(10, String.class, "metaData", false, "META_DATA");
        public final static Property Size = new Property(11, long.class, "size", false, "SIZE");
        public final static Property Duration = new Property(12, String.class, "duration", false, "DURATION");
    }


    public DlnaItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DlnaItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DLNA_ITEM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"MIME_TYPE\" TEXT," + // 2: mimeType
                "\"IMAGE\" TEXT," + // 3: image
                "\"NAME\" TEXT," + // 4: name
                "\"PATH\" TEXT," + // 5: path
                "\"IS_CONTAINER\" INTEGER NOT NULL ," + // 6: isContainer
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 7: isSelected
                "\"CHILD_COUNT\" INTEGER NOT NULL ," + // 8: childCount
                "\"CONTAINER_ID\" TEXT," + // 9: containerId
                "\"META_DATA\" TEXT," + // 10: metaData
                "\"SIZE\" INTEGER NOT NULL ," + // 11: size
                "\"DURATION\" TEXT);"); // 12: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DLNA_ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DlnaItemEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(3, mimeType);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getIsContainer() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(9, entity.getChildCount());
 
        String containerId = entity.getContainerId();
        if (containerId != null) {
            stmt.bindString(10, containerId);
        }
 
        String metaData = entity.getMetaData();
        if (metaData != null) {
            stmt.bindString(11, metaData);
        }
        stmt.bindLong(12, entity.getSize());
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(13, duration);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DlnaItemEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String mimeType = entity.getMimeType();
        if (mimeType != null) {
            stmt.bindString(3, mimeType);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
        stmt.bindLong(7, entity.getIsContainer() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(9, entity.getChildCount());
 
        String containerId = entity.getContainerId();
        if (containerId != null) {
            stmt.bindString(10, containerId);
        }
 
        String metaData = entity.getMetaData();
        if (metaData != null) {
            stmt.bindString(11, metaData);
        }
        stmt.bindLong(12, entity.getSize());
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(13, duration);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DlnaItemEntity readEntity(Cursor cursor, int offset) {
        DlnaItemEntity entity = new DlnaItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mimeType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.getShort(offset + 6) != 0, // isContainer
            cursor.getShort(offset + 7) != 0, // isSelected
            cursor.getInt(offset + 8), // childCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // containerId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // metaData
            cursor.getLong(offset + 11), // size
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DlnaItemEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMimeType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsContainer(cursor.getShort(offset + 6) != 0);
        entity.setIsSelected(cursor.getShort(offset + 7) != 0);
        entity.setChildCount(cursor.getInt(offset + 8));
        entity.setContainerId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMetaData(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSize(cursor.getLong(offset + 11));
        entity.setDuration(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DlnaItemEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DlnaItemEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DlnaItemEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
